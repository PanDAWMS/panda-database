-- Generated by Ora2Pg, the Oracle database Schema converter, version 21.1
-- Copyright 2000-2020 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:PDBR

SET client_encoding TO 'UTF8';

\set ON_ERROR_STOP ON

SET check_function_bodies = false;

CREATE SCHEMA IF NOT EXISTS doma_pandabigmon;
ALTER SCHEMA doma_pandabigmon OWNER TO panda;

SET search_path = doma_pandabigmon,public;

CREATE TABLE all_requests (
	id bigint,
	server varchar(100),
	remote varchar(100),
	qtime timestamp,
	url varchar(2500),
	referrer varchar(4000),
	useragent varchar(400),
	is_rejected smallint,
	urlview varchar(300)
) ;
ALTER TABLE all_requests OWNER TO panda;
CREATE INDEX all_requests_urlview_qtime_idx ON all_requests (urlview, qtime);

CREATE TABLE all_requests_daily (
	qtime timestamp,
	remote varchar(100),
	is_rejected smallint,
	server varchar(100),
	urlview varchar(300),
	url varchar(2500),
	referrer varchar(4000),
	useragent varchar(400),
	rtime timestamp,
	load decimal(10,2),
	mem decimal(10,2),
	dbactivesess integer,
	dbtotalsess integer,
	id bigint
) ;
ALTER TABLE all_requests_daily OWNER TO panda;
CREATE INDEX all_requests_daily_idx ON all_requests_daily (id);

CREATE TABLE authtoken_token (
	key varchar(40),
	user_id varchar(20),
	created timestamp DEFAULT CURRENT_TIMESTAMP
) ;
ALTER TABLE authtoken_token OWNER TO panda;

CREATE TABLE auth_group (
	id bigint NOT NULL,
	name varchar(80)
) ;
ALTER TABLE auth_group OWNER TO panda;
CREATE INDEX sys_c002462746 ON auth_group (name);
ALTER TABLE auth_group ADD PRIMARY KEY (id);

CREATE TABLE auth_group_permissions (
	id bigint NOT NULL,
	group_id bigint NOT NULL,
	permission_id bigint NOT NULL
) ;
ALTER TABLE auth_group_permissions OWNER TO panda;
CREATE INDEX auth_group_group_id_b120cbf9 ON auth_group_permissions (group_id);
CREATE INDEX auth_group_permission_84c5c92e ON auth_group_permissions (permission_id);
ALTER TABLE auth_group_permissions ADD PRIMARY KEY (id);

CREATE TABLE auth_user (
	id bigint NOT NULL,
	password varchar(128),
	last_login timestamp,
	is_superuser boolean,
	username varchar(50),
	first_name varchar(100),
	last_name varchar(100),
	email varchar(100),
	is_staff boolean,
	is_active boolean,
	date_joined timestamp,
	is_tester boolean,
	is_expert boolean
) ;
ALTER TABLE auth_user OWNER TO panda;
ALTER TABLE auth_user ADD PRIMARY KEY (id);

CREATE TABLE auth_user_groups (
	id bigint NOT NULL,
	user_id bigint NOT NULL,
	group_id bigint NOT NULL
) ;
ALTER TABLE auth_user_groups OWNER TO panda;
CREATE UNIQUE INDEX auth_user_user_id_g_94350c0c_u ON auth_user_groups (user_id, group_id);
ALTER TABLE auth_user_groups ADD PRIMARY KEY (id);

CREATE TABLE auth_user_user_permissions (
	id bigint NOT NULL,
	user_id bigint NOT NULL,
	permission_id bigint NOT NULL
) ;
ALTER TABLE auth_user_user_permissions OWNER TO panda;
CREATE UNIQUE INDEX auth_user_user_id_p_14a6b632_u ON auth_user_user_permissions (user_id, permission_id);
CREATE INDEX auth_user__permission_1fbb5f2c ON auth_user_user_permissions (permission_id);
CREATE INDEX auth_user__user_id_a95ead1b ON auth_user_user_permissions (user_id);
ALTER TABLE auth_user_user_permissions ADD PRIMARY KEY (id);

CREATE TABLE djangocache (
	cache_key varchar(1000) NOT NULL,
	expires timestamp NOT NULL,
	value text NOT NULL
) ;
ALTER TABLE djangocache OWNER TO panda;
CREATE INDEX djangocache_indx_expires ON djangocache (expires);
ALTER TABLE djangocache ADD PRIMARY KEY (cache_key);

CREATE TABLE django_migrations (
	id bigint NOT NULL,
	app varchar(255),
	name varchar(255),
	applied timestamp NOT NULL
) ;
ALTER TABLE django_migrations OWNER TO panda;
ALTER TABLE django_migrations ADD PRIMARY KEY (id);

CREATE TABLE django_session (
	session_key varchar(40) NOT NULL,
	session_data varchar(4000) NOT NULL,
	expire_date timestamp NOT NULL
) ;
ALTER TABLE django_session OWNER TO panda;
CREATE INDEX django_session_inx_exp_date ON django_session (expire_date);
ALTER TABLE django_session ADD PRIMARY KEY (session_key);

CREATE TABLE objects_comparison (
	id bigint NOT NULL,
	userid bigint NOT NULL,
	object varchar(20),
	comparison_list varchar(200)
) ;
ALTER TABLE objects_comparison OWNER TO panda;
ALTER TABLE objects_comparison ADD PRIMARY KEY (id);

CREATE TABLE request_stats (
	id bigint NOT NULL,
	server varchar(100) NOT NULL,
	remote varchar(100) NOT NULL,
	qtime timestamp NOT NULL,
	qduration timestamp NOT NULL,
	load varchar(40) NOT NULL,
	mem varchar(40) NOT NULL,
	description varchar(4000) NOT NULL,
	url varchar(2500) NOT NULL,
	duration numeric(38) NOT NULL,
	referrer varchar(4000),
	useragent varchar(300)
) ;
COMMENT ON COLUMN request_stats.load IS E'CPU load on the PanDA monitor machine at the time of the query ';
COMMENT ON COLUMN request_stats.mem IS E'Memory usage at time of the query in MB';
COMMENT ON COLUMN request_stats.qduration IS E'End time of the query in UTC';
COMMENT ON COLUMN request_stats.qtime IS E'Start time of the query in UTC';
COMMENT ON COLUMN request_stats.referrer IS E'Previous request';
COMMENT ON COLUMN request_stats.remote IS E'IP address of the originating request';
COMMENT ON COLUMN request_stats.server IS E'Host name of the server executing the query';
COMMENT ON COLUMN request_stats.url IS E'URL of the query';
COMMENT ON COLUMN request_stats.useragent IS E'User agent';
ALTER TABLE request_stats OWNER TO panda;
CREATE INDEX request_stats_remote_qtime_idx ON request_stats (remote, qtime);
ALTER TABLE request_stats ADD PRIMARY KEY (id);

CREATE TABLE rucio_accounts (
	certificatedn varchar(250),
	rucio_account varchar(40),
	create_time timestamp DEFAULT ((CURRENT_TIMESTAMP(0) AT TIME ZONE 'UTC')),
	id numeric(38)
) ;
ALTER TABLE rucio_accounts OWNER TO panda;
CREATE INDEX rucio_accounts_idx ON rucio_accounts (certificatedn);

CREATE TABLE social_auth_association (
	id bigint NOT NULL,
	server_url varchar(255),
	handle varchar(255),
	secret varchar(255),
	issued bigint NOT NULL,
	lifetime bigint NOT NULL,
	assoc_type varchar(64)
) ;
ALTER TABLE social_auth_association OWNER TO panda;
ALTER TABLE social_auth_association ADD PRIMARY KEY (id);
ALTER TABLE social_auth_association ADD UNIQUE (server_url,handle);

CREATE TABLE social_auth_code (
	id bigint NOT NULL,
	email varchar(254),
	code varchar(32),
	verified smallint NOT NULL
) ;
ALTER TABLE social_auth_code OWNER TO panda;
CREATE INDEX social_auth_code_code_a2393167 ON social_auth_code (code);
ALTER TABLE social_auth_code ADD PRIMARY KEY (id);
ALTER TABLE social_auth_code ADD UNIQUE (email,code);

CREATE TABLE social_auth_nonce (
	id bigint NOT NULL,
	server_url varchar(255),
	timestamp bigint NOT NULL,
	salt varchar(65)
) ;
ALTER TABLE social_auth_nonce OWNER TO panda;
ALTER TABLE social_auth_nonce ADD PRIMARY KEY (id);
ALTER TABLE social_auth_nonce ADD UNIQUE (server_url,timestamp,salt);

CREATE TABLE social_auth_partial (
	id bigint NOT NULL,
	token varchar(32),
	next_step bigint NOT NULL,
	backend varchar(32),
	data text
) ;
ALTER TABLE social_auth_partial OWNER TO panda;
CREATE INDEX social_aut_token_3017fea3 ON social_auth_partial (token);
ALTER TABLE social_auth_partial ADD PRIMARY KEY (id);

CREATE TABLE social_auth_usersocialauth (
	id bigint NOT NULL,
	provider varchar(32),
	uid varchar(255),
	extra_data text,
	user_id bigint NOT NULL,
	modified timestamp,
	created timestamp
) ;
ALTER TABLE social_auth_usersocialauth OWNER TO panda;
CREATE INDEX social_aut_user_id_17d28448 ON social_auth_usersocialauth (user_id);
ALTER TABLE social_auth_usersocialauth ADD UNIQUE (provider,uid);

CREATE TABLE tmp_ids1debug (
	id bigint,
	transactionkey bigint,
	ins_time timestamp DEFAULT LOCALTIMESTAMP
) ;
ALTER TABLE tmp_ids1debug OWNER TO panda;
CREATE INDEX tmp_ids1debug_idx_trans ON tmp_ids1debug (transactionkey, id);

CREATE TABLE user_settings (
	id bigint NOT NULL,
	userid bigint NOT NULL,
	page varchar(100) NOT NULL,
	preferences varchar(4000) NOT NULL DEFAULT '{}'
) ;
COMMENT ON COLUMN user_settings.page IS E'Name of bigpandamon page';
COMMENT ON COLUMN user_settings.preferences IS E'Settings for bigpandamon page ';
COMMENT ON COLUMN user_settings.userid IS E'ID of user in AUTH_USER ';
ALTER TABLE user_settings OWNER TO panda;
ALTER TABLE user_settings ADD PRIMARY KEY (id);

CREATE TABLE visits (
	visitid bigint NOT NULL,
	url varchar(1000),
	time timestamp DEFAULT CURRENT_TIMESTAMP,
	service numeric(38),
	userid numeric(38),
	remote varchar(100)
) ;
COMMENT ON COLUMN visits.service IS E'0 - bigpanda monitor';
COMMENT ON COLUMN visits.time IS E'Time of visit';
COMMENT ON COLUMN visits.userid IS E'Id in usertable of the authenticated user table';
COMMENT ON COLUMN visits.visitid IS E'Counter';
ALTER TABLE visits OWNER TO panda;
CREATE INDEX user_idx ON visits (userid);
ALTER TABLE visits ADD PRIMARY KEY (visitid);

CREATE TABLE rating (
	ratingid bigint NOT NULL,
    rating bigint,
    userid smallint,
    jeditaskid bigint,
    feedback varchar(4000),
    added timestamp DEFAULT CURRENT_TIMESTAMP
) ;
ALTER TABLE rating OWNER TO panda;
CREATE INDEX rating_added_idx ON rating (added);
CREATE INDEX rating_jeditaskid_idx ON rating (jeditaskid);
ALTER TABLE rating ADD PRIMARY KEY (ratingid);
